/*
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */

package com.liferay.site.teams.uad.anonymizer;

import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.Team;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.service.TeamLocalService;
import com.liferay.site.teams.uad.constants.SiteTeamsUADConstants;
import com.liferay.user.associated.data.anonymizer.DynamicQueryUADAnonymizer;

import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the team UAD anonymizer.
 *
 * <p>
 * This implementation exists only as a container for the default methods
 * generated by ServiceBuilder. All custom service methods should be put in
 * {@link TeamUADAnonymizer}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @generated
 */
public abstract class BaseTeamUADAnonymizer
	extends DynamicQueryUADAnonymizer<Team> {

	@Override
	public void autoAnonymize(Team team, long userId, User anonymousUser)
		throws PortalException {

		if (team.getUserId() == userId) {
			team.setUserId(anonymousUser.getUserId());
			team.setUserName(anonymousUser.getFullName());
		}

		teamLocalService.updateTeam(team);
	}

	@Override
	public void delete(Team team) throws PortalException {
		teamLocalService.deleteTeam(team);
	}

	@Override
	public Class<Team> getTypeClass() {
		return Team.class;
	}

	@Override
	protected ActionableDynamicQuery doGetActionableDynamicQuery() {
		return teamLocalService.getActionableDynamicQuery();
	}

	@Override
	protected String[] doGetUserIdFieldNames() {
		return SiteTeamsUADConstants.USER_ID_FIELD_NAMES_TEAM;
	}

	@Reference
	protected TeamLocalService teamLocalService;

}