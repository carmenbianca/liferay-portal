/*
 * SPDX-FileCopyrightText: Â© 2020 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */

import handleFieldAdded from '../../../../../src/main/resources/META-INF/resources/js/components/LayoutProvider/handlers/fieldAddedHandler.es';
import handleFieldEdited from '../../../../../src/main/resources/META-INF/resources/js/components/LayoutProvider/handlers/fieldEditedHandler.es';
import {shouldAutoGenerateName} from '../../../../../src/main/resources/META-INF/resources/js/components/LayoutProvider/util/defaults.es';
import {generateFieldName} from '../../../../../src/main/resources/META-INF/resources/js/components/LayoutProvider/util/fields.es';
import * as settingsContextUtil from '../../../../../src/main/resources/META-INF/resources/js/components/LayoutProvider/util/settingsContext.es';
import mockFieldTypes from '../../../__mock__/mockFieldTypes.es';
import mockPages from '../../../__mock__/mockPages.es';

describe('LayoutProvider/handlers/fieldEditedHandler', () => {
	describe('handleFieldEdited(props, state, event)', () => {
		it('updates the field label', () => {
			let state = {
				focusedField: {},
				pages: [{rows: [{columns: [{fields: []}]}]}],
				rules: [],
			};

			const props = {
				defaultLanguageId: 'en_US',
				editingLanguageId: 'en_US',
				fieldNameGenerator: (desiredName, currentName) => {
					const {pages} = state;

					return generateFieldName(pages, desiredName, currentName);
				},
				shouldAutoGenerateName,
			};

			// Adds a field

			state = handleFieldAdded(props, state, {
				data: {},
				fieldType: mockFieldTypes[0],
				indexes: {
					columnIndex: 0,
					pageIndex: 0,
					rowIndex: 0,
				},
			});

			// Edits the field label

			state = handleFieldEdited(props, state, {
				propertyName: 'label',
				propertyValue: 'New Label',
			});

			// Asserts label was updated

			expect(state.focusedField.label).toEqual('New Label');
			expect(
				settingsContextUtil.getSettingsContextProperty(
					state.focusedField.settingsContext,
					'label'
				)
			).toEqual('New Label');

			// Asserts name was autogenerated

			expect(state.focusedField.fieldName).toEqual('NewLabel');
			expect(
				settingsContextUtil.getSettingsContextProperty(
					state.focusedField.settingsContext,
					'name'
				)
			).toEqual('NewLabel');
		});

		it('updates the field name', () => {
			let state = {
				focusedField: {},
				pages: [{rows: [{columns: [{fields: []}]}]}],
				rules: [],
			};

			const props = {
				defaultLanguageId: 'en_US',
				editingLanguageId: 'en_US',
				fieldNameGenerator: (desiredName, currentName) => {
					const {pages} = state;

					return generateFieldName(pages, desiredName, currentName);
				},
				shouldAutoGenerateName,
			};

			// Adds a field

			state = handleFieldAdded(props, state, {
				data: {},
				fieldType: mockFieldTypes[0],
				indexes: {
					columnIndex: 0,
					pageIndex: 0,
					rowIndex: 0,
				},
			});

			// Edits the field name

			state = handleFieldEdited(props, state, {
				propertyName: 'name',
				propertyValue: 'NewName',
			});

			// Asserts name was updated

			expect(state.focusedField.fieldName).toEqual('NewName');
			expect(
				settingsContextUtil.getSettingsContextProperty(
					state.focusedField.settingsContext,
					'name'
				)
			).toEqual('NewName');
		});

		it('does not call updateField() when changing name to an empty string', () => {
			const event = {
				propertyName: 'name',
				propertyValue: '',
			};
			const props = {
				editingLanguageId: 'en_US',
			};
			const state = {
				focusedField: {},
				pages: mockPages,
				rules: [],
			};

			const updateFieldSpy = jest.spyOn(
				settingsContextUtil,
				'updateField'
			);

			updateFieldSpy.mockImplementation(() => ({}));

			handleFieldEdited(props, state, event);

			expect(updateFieldSpy).not.toHaveBeenCalled();

			updateFieldSpy.mockRestore();
		});
	});
});
